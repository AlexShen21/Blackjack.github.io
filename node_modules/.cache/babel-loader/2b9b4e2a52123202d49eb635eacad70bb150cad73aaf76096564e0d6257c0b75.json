{"ast":null,"code":"var _jsxFileName = \"/Users/alexshen/Desktop/KTP REACT/src/index.jsx\";\nimport React from 'react';\nimport './style.css';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //Defines the game state \n    this.state = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 400,\n      inputValue: 0,\n      currentBet: null,\n      gameOver: true,\n      message: null\n    };\n  }\n\n  //generate a deck of cards 2-A and suits of diamond, club, heart, and clover\n  generateDeck() {\n    let cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\n    let suits = ['d', 'c', 'h', 's'];\n    let deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({\n          number: cards[i],\n          suit: suits[j]\n        });\n      }\n    }\n    return deck;\n  }\n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return {\n      randomCard,\n      this: state.deck\n    };\n  }\n  dealCards(deck) {\n    //assign the cards \n    const pCard1 = this.getRandomCard(deck);\n    const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n    const pCard2 = this.getRandomCard(dCard1.updatedDeck);\n    const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n    const dealerStartingHand = [dCard1.randomCard, {}];\n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    return {\n      updatedDeck: pCard2.updatedDeck,\n      player,\n      dealer\n    };\n  }\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.state.wallet > 0) {\n        const deck = this.generateDeck();\n        const {\n          updatedDeck,\n          player,\n          dealer\n        } = this.dealCards(deck);\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({\n          message: 'Game over! You are broke! Please start a new game.'\n        });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const {\n        updatedDeck,\n        player,\n        dealer\n      } = this.dealCards(deck);\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 400,\n        inputValue: 0,\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n  addBet(type) {\n    let bet = this.state.inputValue;\n    bet += type;\n    if (bet > this.state.wallet) {\n      return;\n    }\n    this.setState({\n      inputValue: bet\n    });\n  }\n  placeBet() {\n    const currentBet = this.state.inputValue;\n    if (currentBet === 0) {\n      this.setState({\n        message: 'Cannot bet $0'\n      });\n    } else {\n      // Deduct current bet from wallet\n      const wallet = this.state.wallet - currentBet;\n      this.setState({\n        wallet,\n        inputValue: 0,\n        currentBet,\n        gameOver: false\n      });\n    }\n  }\n  hit() {\n    if (!this.state.gameOver) {\n      if (this.state.currentBet) {\n        const {\n          randomCard,\n          updatedDeck\n        } = this.getRandomCard(this.state.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n        if (player.count > 21) {\n          this.setState({\n            player,\n            gameOver: true,\n            message: 'BUST!'\n          });\n        } else {\n          this.setState({\n            deck: updatedDeck,\n            player\n          });\n        }\n      } else {\n        this.setState({\n          message: 'Must bet'\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  dealerDraw(deck) {\n    const {\n      randomCard,\n      updatedDeck\n    } = this.getRandomCard(deck);\n    let dealer = this.state.dealer;\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return {\n      dealer,\n      updatedDeck\n    };\n  }\n  getCount(cards) {\n    const cardList = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        cardList.push(card);\n      } else if (card.number) {\n        cardList.unshift(card);\n      }\n    });\n    return cardList.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return total + 11 <= 21 ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  stand() {\n    if (!this.state.gameOver) {\n      // Show dealer's 2nd card\n      const randomCard = this.getRandomCard(this.state.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.state.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while (dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.state.wallet + this.state.currentBet * 2,\n          gameOver: true,\n          message: 'Dealer bust! You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.state.player);\n        let wallet = this.state.wallet;\n        let message;\n        if (winner === 'dealer') {\n          message = 'Dealer wins...';\n        } else if (winner === 'player') {\n          wallet += this.state.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.state.currentBet;\n          message = 'Push.';\n        }\n        this.setState({\n          deck,\n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  getWinner() {\n    if (this.state.dealer.count > this.state.player.count) {\n      return 'dealer';\n    } else if (this.state.dealer.count < this.state.player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n  /*\n  componentWillMount() {\n    this.startNewGame();\n  }*/\n  inputChange(e) {\n    const inputValue = +e.target.value;\n    this.setState({\n      inputValue\n    });\n  }\n  handleKeyDown(e) {\n    const enter = 13;\n    console.log(e.keyCode);\n    if (e.keyCode === enter) {\n      this.placeBet();\n    }\n  }\n  componentWillMount() {\n    this.startNewGame();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  /*\n    render(){\n      \n      \n      \n  \n      return (\n  \n        <div>\n          <div>\n            <h1 className='title'>Blackjack</h1>\n  \n            { !this.state.startGame ?\n              <div>\n            <div className='newGame'><button className = 'newGameButton' onClick={() => {this.startNewGame()}}>New Game</button></div>\n            </div>\n            :null\n            }\n            \n            {\n              !this.state.gameOver && this.state.currentBet ? \n            <p className='actions'>\n              <button className = 'actionButton' onClick={() => {this.hit()}}>Hit</button>\n              <button className = 'actionButton'onClick={() => {this.stand()}}>Stand</button>\n  \n  \n            </p>\n            : null\n            }\n          </div>\n          \n          <div>\n            {\n            !this.state.gameOver?\n            <div>\n            <div className = 'bet'>\n              <button className = 'betMoney5' onClick={() => {this.addBet(5)}}> $5 </button>\n              <button className = 'betMoney10' onClick={() => {this.addBet(10)}}> $10 </button>\n              <button className = 'betMoney20' onClick={() => {this.addBet(20)}}> $20 </button>\n              \n            </div>\n            <div className = 'placeBet'>\n              <button className = 'placeBetButton' onClick={() => {this.placeBet(this.state.currentBet)}}> Place Bet </button>\n            </div>\n            \n            </div>\n            : null\n            }\n            \n  \n          </div>\n  \n          {\n          <div>\n          <div className = 'Wallet'>Wallet: ${ this.state.wallet }</div>\n          <div className = 'currBet'>Current Bet: ${ this.state.inputValue }</div>\n          </div>}\n          \n          \n          \n          <p>Your Hand ({ this.state.player.count })</p>\n          <table className=\"cards\">\n            <tr>\n              { this.state.player.cards.map((card, i) => {\n                return <Card key={i} number={card.number} suit={card.suit}/>\n              }) }\n            </tr>\n          </table>\n          <p>Dealer's Hand ({ this.state.dealer.count })</p>\n          <table className=\"cards\">\n            <tr>\n              { this.state.dealer.cards.map((card, i) => {\n                return <Card key={i} number={card.number} suit={card.suit}/>;\n              }) }\n            </tr>\n          </table>\n          \n      \n      </div>\n      )\n      }\n      \n    }\n    const Card = ({ number, suit }) => {\n      const combo = (number) ? `${number}${suit}` : null;\n      \n      return (\n        <td>\n          <div className= 'card'>\n            { combo }\n          </div>\n        </td>\n      );\n    };\n  \n  \n  \n    ReactDOM.render(<App />, document.getElementById('root'));*/\n  render() {\n    let dealerCount;\n    const card1 = this.state.dealer.cards[0].number;\n    const card2 = this.state.dealer.cards[1].number;\n    if (card2) {\n      dealerCount = this.state.dealer.count;\n    } else {\n      if (card1 === 'J' || card1 === 'Q' || card1 === 'K') {\n        dealerCount = 10;\n      } else if (card1 === 'A') {\n        dealerCount = 11;\n      } else {\n        dealerCount = card1;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.startNewGame();\n          },\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.hit();\n          },\n          children: \"Hit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.stand();\n          },\n          children: \"Stand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wallet: $\", this.state.wallet]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), !this.state.currentBet ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-bet\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"bet\",\n            placeholder: \"\",\n            value: this.state.inputValue,\n            onChange: this.inputChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.placeBet();\n          },\n          children: \"Place Bet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this) : null, this.state.gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.startNewGame('continue');\n          },\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Hand (\", this.state.player.count, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: this.state.player.cards.map((card, i) => {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              number: card.number,\n              suit: card.suit\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Dealer's Hand (\", this.state.dealer.count, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: this.state.dealer.cards.map((card, i) => {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              number: card.number,\n              suit: card.suit\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nconst Card = _ref => {\n  let {\n    number,\n    suit\n  } = _ref;\n  const combo = number ? `${number}${suit}` : null;\n  const color = suit === '♦' || suit === '♥' ? 'card-red' : 'card';\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: color,\n      children: combo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 440,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","App","Component","constructor","props","state","deck","dealer","player","wallet","inputValue","currentBet","gameOver","message","generateDeck","cards","suits","i","length","j","push","number","suit","getRandomCard","updatedDeck","randomIndex","Math","floor","random","randomCard","splice","this","dealCards","pCard1","dCard1","pCard2","playerStartingHand","dealerStartingHand","count","getCount","startNewGame","type","setState","addBet","bet","placeBet","hit","dealerDraw","cardList","forEach","card","unshift","reduce","total","stand","pop","draw","winner","getWinner","inputChange","e","target","value","handleKeyDown","enter","console","log","keyCode","componentWillMount","body","document","querySelector","addEventListener","bind","render","dealerCount","card1","card2","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","name","placeholder","onChange","map","Card","_ref","combo","color","_c","getElementById","$RefreshReg$"],"sources":["/Users/alexshen/Desktop/KTP REACT/src/index.jsx"],"sourcesContent":["import React from 'react';\nimport './style.css'\nimport ReactDOM from 'react-dom';\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props); \n      //Defines the game state \n      this.state = {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 400,\n        inputValue: 0,\n        currentBet: null,\n        gameOver: true,\n        message: null,\n      };\n    }\n    \n    //generate a deck of cards 2-A and suits of diamond, club, heart, and clover\n    generateDeck() {\n      let cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n      let suits = ['d','c','h','s'];\n      let deck = [];\n      for (let i = 0; i < cards.length; i++) {\n        for (let j = 0; j < suits.length; j++) {\n          deck.push({number: cards[i], suit: suits[j]});\n        }\n      }\n      return deck;\n    }\n\n    getRandomCard(deck) {\n      const updatedDeck = deck;\n      const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n      const randomCard = updatedDeck[randomIndex];\n      updatedDeck.splice(randomIndex, 1);\n      return { randomCard, this:state.deck };\n    }\n    \n    dealCards(deck) {\n      //assign the cards \n      const pCard1 = this.getRandomCard(deck);\n      const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n      const pCard2 = this.getRandomCard(dCard1.updatedDeck);    \n      const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n      const dealerStartingHand = [dCard1.randomCard, {}];\n      \n      const player = {\n        cards: playerStartingHand,\n        count: this.getCount(playerStartingHand)\n      };\n      const dealer = {\n        cards: dealerStartingHand,\n        count: this.getCount(dealerStartingHand)\n      };\n      \n      return {updatedDeck: pCard2.updatedDeck, player, dealer};\n    }\n  \n    startNewGame(type) {\n      if (type === 'continue') {\n        if (this.state.wallet > 0) {\n          const deck = this.generateDeck();\n          const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n          this.setState({\n            deck: updatedDeck,\n            dealer,\n            player,\n            currentBet: null,\n            gameOver: false,\n            message: null\n          });\n        } else {\n          this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n        }\n      } \n      else {\n        const deck = this.generateDeck();\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          wallet: 400,\n          inputValue: 0,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      }\n    }\n         \n\n    addBet(type){\n      let bet = this.state.inputValue;\n      bet += type;\n      if(bet > this.state.wallet){\n        return;\n      }\n      this.setState({\n        inputValue: bet \n      })\n    }\n\n    placeBet() {\n      const currentBet = this.state.inputValue;\n  \n      if (currentBet === 0) {\n        this.setState({ message: 'Cannot bet $0' });\n      } else {\n        // Deduct current bet from wallet\n        const wallet = this.state.wallet - currentBet;\n        this.setState({ wallet, inputValue: 0, currentBet, gameOver: false});\n      }\n    }\n    \n    hit() {\n      if (!(this.state.gameOver)) {\n        if (this.state.currentBet) {\n          const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n          const player = this.state.player;\n          player.cards.push(randomCard);\n          player.count = this.getCount(player.cards);\n  \n          if (player.count > 21) {\n            this.setState({ player, gameOver: true, message: 'BUST!' });\n          } else {\n            this.setState({ deck: updatedDeck, player });\n          }\n        } else {\n          this.setState({ message: 'Must bet' });\n        }\n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    dealerDraw(deck) {\n      const { randomCard, updatedDeck } = this.getRandomCard(deck);\n      let dealer = this.state.dealer;\n      dealer.cards.push(randomCard);\n      dealer.count = this.getCount(dealer.cards);\n      return { dealer, updatedDeck };\n    }\n    \n    getCount(cards) {\n      const cardList = [];\n      cards.forEach(card => {\n        if (card.number === 'A') {\n          cardList.push(card);\n        } else if (card.number) {\n          cardList.unshift(card);\n        }\n        \n\n      });\n      \n      return cardList.reduce((total, card) => {\n        if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n        } else if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n        } else {\n          return total + card.number;\n        }\n      }, 0);\n    }\n    \n    \n    stand() {\n      if (!this.state.gameOver) {\n        // Show dealer's 2nd card\n        const randomCard = this.getRandomCard(this.state.deck);\n        let deck = randomCard.updatedDeck;\n        let dealer = this.state.dealer;\n        dealer.cards.pop();\n        dealer.cards.push(randomCard.randomCard);\n        dealer.count = this.getCount(dealer.cards);\n  \n        // Keep drawing cards until count is 17 or more\n        while(dealer.count < 17) {\n          const draw = this.dealerDraw(dealer, deck);\n          dealer = draw.dealer;\n          deck = draw.updatedDeck;\n        }\n  \n        if (dealer.count > 21) {\n          this.setState({\n            deck,\n            dealer,\n            wallet: this.state.wallet + this.state.currentBet * 2,\n            gameOver: true,\n            message: 'Dealer bust! You win!'\n          });\n        } else {\n          const winner = this.getWinner(dealer, this.state.player);\n          let wallet = this.state.wallet;\n          let message;\n          \n          if (winner === 'dealer') {\n            message = 'Dealer wins...';\n          } else if (winner === 'player') {\n            wallet += this.state.currentBet * 2;\n            message = 'You win!';\n          } else {\n            wallet += this.state.currentBet;\n            message = 'Push.';\n          }\n          \n          this.setState({\n            deck, \n            dealer,\n            wallet,\n            gameOver: true,\n            message\n          });\n        } \n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    getWinner() {\n\n      if (this.state.dealer.count > this.state.player.count) {\n        return 'dealer';\n      } else if (this.state.dealer.count < this.state.player.count) {\n        return 'player';\n      } else {\n        return 'push';\n      }\n    }\n    /*\n    componentWillMount() {\n      this.startNewGame();\n    }*/\n    inputChange(e) {\n      const inputValue = +e.target.value;\n      this.setState({inputValue});\n    }\n    \n    handleKeyDown(e) {\n      const enter = 13;\n      console.log(e.keyCode);\n      \n      if (e.keyCode === enter) {\n        this.placeBet();\n      }\n    }\n    \n    componentWillMount() {\n      this.startNewGame();\n      const body = document.querySelector('body');\n      body.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n\n/*\n  render(){\n    \n    \n    \n\n    return (\n\n      <div>\n        <div>\n          <h1 className='title'>Blackjack</h1>\n\n          { !this.state.startGame ?\n            <div>\n          <div className='newGame'><button className = 'newGameButton' onClick={() => {this.startNewGame()}}>New Game</button></div>\n          </div>\n          :null\n          }\n          \n          {\n            !this.state.gameOver && this.state.currentBet ? \n          <p className='actions'>\n            <button className = 'actionButton' onClick={() => {this.hit()}}>Hit</button>\n            <button className = 'actionButton'onClick={() => {this.stand()}}>Stand</button>\n\n\n          </p>\n          : null\n          }\n        </div>\n        \n        <div>\n          {\n          !this.state.gameOver?\n          <div>\n          <div className = 'bet'>\n            <button className = 'betMoney5' onClick={() => {this.addBet(5)}}> $5 </button>\n            <button className = 'betMoney10' onClick={() => {this.addBet(10)}}> $10 </button>\n            <button className = 'betMoney20' onClick={() => {this.addBet(20)}}> $20 </button>\n            \n          </div>\n          <div className = 'placeBet'>\n            <button className = 'placeBetButton' onClick={() => {this.placeBet(this.state.currentBet)}}> Place Bet </button>\n          </div>\n          \n          </div>\n          : null\n          }\n          \n\n        </div>\n\n        {\n        <div>\n        <div className = 'Wallet'>Wallet: ${ this.state.wallet }</div>\n        <div className = 'currBet'>Current Bet: ${ this.state.inputValue }</div>\n        </div>}\n        \n        \n        \n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n    \n    </div>\n    )\n    }\n    \n  }\n  const Card = ({ number, suit }) => {\n    const combo = (number) ? `${number}${suit}` : null;\n    \n    return (\n      <td>\n        <div className= 'card'>\n          { combo }\n        </div>\n      </td>\n    );\n  };\n\n\n\n  ReactDOM.render(<App />, document.getElementById('root'));*/\n  render() {\n    let dealerCount;\n    const card1 = this.state.dealer.cards[0].number;\n    const card2 = this.state.dealer.cards[1].number;\n    if (card2) {\n      dealerCount = this.state.dealer.count;\n    } else {\n      if (card1 === 'J' || card1 === 'Q' || card1 === 'K') {\n        dealerCount = 10;\n      } else if (card1 === 'A') {\n        dealerCount = 11;\n      } else {\n        dealerCount = card1;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"buttons\">\n          <button onClick={() => {this.startNewGame()}}>New Game</button>\n          <button onClick={() => {this.hit()}}>Hit</button>\n          <button onClick={() => {this.stand()}}>Stand</button>\n        </div>\n        \n        <p>Wallet: ${ this.state.wallet }</p>\n        {\n          !this.state.currentBet ? \n          <div className=\"input-bet\">            \n            <form>\n              <input type=\"text\" name=\"bet\" placeholder=\"\" value={this.state.inputValue} onChange={this.inputChange.bind(this)}/>\n            </form>\n            <button onClick={() => {this.placeBet()}}>Place Bet</button>\n          </div>\n          : null\n        }\n        {\n          this.state.gameOver ?\n          <div className=\"buttons\">\n            <button onClick={() => {this.startNewGame('continue')}}>Continue</button>\n          </div>\n          : null\n        }\n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        \n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n        <p>{ this.state.message }</p>\n      </div>\n    );\n  }\n};\n\nconst Card = ({ number, suit }) => {\n  const combo = (number) ? `${number}${suit}` : null;\n  const color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\n  \n  return (\n    <td>\n      <div className={color}>\n        { combo }\n      </div>\n    </td>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}