{"ast":null,"code":"import './style.css';\n//import ReactDOM from 'react-dom';\n\nexport default App;\n/*\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 0,\n      inputValue: '',\n      currentBet: null,\n      gameOver: false,\n      message: null\n    };\n  }\n\n  generateDeck() {\n    const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n    const suits = ['♦','♣','♥','♠'];\n    const deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({number: cards[i], suit: suits[j]});\n      }\n    }\n    return deck;\n  }\n  \n  dealCards(deck) {\n    const playerCard1 = this.getRandomCard(deck);\n    const dealerCard1 = this.getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = this.getRandomCard(dealerCard1.updatedDeck);    \n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard, {}];\n    \n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    \n    return {updatedDeck: playerCard2.updatedDeck, player, dealer};\n  }\n\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.state.wallet > 0) {\n        const deck = (this.state.deck.length < 10) ? this.generateDeck() : this.state.deck;\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 100,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n       \n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return { randomCard, updatedDeck };\n  }\n  \n  placeBet() {\n    const currentBet = this.state.inputValue;\n\n    if (currentBet > this.state.wallet) {\n      this.setState({ message: 'Insufficient funds to bet that amount.' });\n    } else if (currentBet % 1 !== 0) {\n      this.setState({ message: 'Please bet whole numbers only.' });\n    } else {\n      // Deduct current bet from wallet\n      const wallet = this.state.wallet - currentBet;\n      this.setState({ wallet, inputValue: '', currentBet });\n    }\n  }\n  \n  hit() {\n    if (!this.state.gameOver) {\n      if (this.state.currentBet) {\n        const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n\n        if (player.count > 21) {\n          this.setState({ player, gameOver: true, message: 'BUST!' });\n        } else {\n          this.setState({ deck: updatedDeck, player });\n        }\n      } else {\n        this.setState({ message: 'Please place bet.' });\n      }\n    } else {\n      this.setState({ message: 'Game over! Please start a new game.' });\n    }\n  }\n  \n  dealerDraw(dealer, deck) {\n    const { randomCard, updatedDeck } = this.getRandomCard(deck);\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return { dealer, updatedDeck };\n  }\n  \n  getCount(cards) {\n    const rearranged = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n      \n      \n      // (card.number === 'A') ? rearranged.push(card) : rearranged.unshift(card);\n    });\n    \n    return rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return (total + 11 <= 21) ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  \n  stand() {\n    if (!this.state.gameOver) {\n      // Show dealer's 2nd card\n      const randomCard = this.getRandomCard(this.state.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.state.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while(dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.state.wallet + this.state.currentBet * 2,\n          gameOver: true,\n          message: 'Dealer bust! You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.state.player);\n        let wallet = this.state.wallet;\n        let message;\n        \n        if (winner === 'dealer') {\n          message = 'Dealer wins...';\n        } else if (winner === 'player') {\n          wallet += this.state.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.state.currentBet;\n          message = 'Push.';\n        }\n        \n        this.setState({\n          deck, \n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      } \n    } else {\n      this.setState({ message: 'Game over! Please start a new game.' });\n    }\n  }\n  \n  getWinner(dealer, player) {\n    if (dealer.count > player.count) {\n      return 'dealer';\n    } else if (dealer.count < player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n  \n  inputChange(e) {\n    const inputValue = +e.target.value;\n    this.setState({inputValue});\n  }\n  \n  handleKeyDown(e) {\n    const enter = 13;\n    console.log(e.keyCode);\n    \n    if (e.keyCode === enter) {\n      this.placeBet();\n    }\n  }\n  \n  componentWillMount() {\n    this.startNewGame();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n  \n  render() {\n    let dealerCount;\n    const card1 = this.state.dealer.cards[0].number;\n    const card2 = this.state.dealer.cards[1].number;\n    if (card2) {\n      dealerCount = this.state.dealer.count;\n    } else {\n      if (card1 === 'J' || card1 === 'Q' || card1 === 'K') {\n        dealerCount = 10;\n      } else if (card1 === 'A') {\n        dealerCount = 11;\n      } else {\n        dealerCount = card1;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"buttons\">\n          <button onClick={() => {this.startNewGame()}}>New Game</button>\n          <button onClick={() => {this.hit()}}>Hit</button>\n          <button onClick={() => {this.stand()}}>Stand</button>\n        </div>\n        \n        <p>Wallet: ${ this.state.wallet }</p>\n        {\n          !this.state.currentBet ? \n          <div className=\"input-bet\">            \n            <form>\n              <input type=\"text\" name=\"bet\" placeholder=\"\" value={this.state.inputValue} onChange={this.inputChange.bind(this)}/>\n            </form>\n            <button onClick={() => {this.placeBet()}}>Place Bet</button>\n          </div>\n          : null\n        }\n        {\n          this.state.gameOver ?\n          <div className=\"buttons\">\n            <button onClick={() => {this.startNewGame('continue')}}>Continue</button>\n          </div>\n          : null\n        }\n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        \n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n        <p>{ this.state.message }</p>\n      </div>\n    );\n  }\n};\n\nconst Card = ({ number, suit }) => {\n  const combo = (number) ? `${number}${suit}` : null;\n  const color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\n  \n  return (\n    <td>\n      <div className={color}>\n        { combo }\n      </div>\n    </td>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('main'));\n*/","map":{"version":3,"names":["App"],"sources":["/Users/alexshen/Desktop/test-react/src/index.jsx"],"sourcesContent":["import './style.css';\n//import ReactDOM from 'react-dom';\n\n\nexport default App;\n/*\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 0,\n      inputValue: '',\n      currentBet: null,\n      gameOver: false,\n      message: null\n    };\n  }\n\n  generateDeck() {\n    const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n    const suits = ['♦','♣','♥','♠'];\n    const deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({number: cards[i], suit: suits[j]});\n      }\n    }\n    return deck;\n  }\n  \n  dealCards(deck) {\n    const playerCard1 = this.getRandomCard(deck);\n    const dealerCard1 = this.getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = this.getRandomCard(dealerCard1.updatedDeck);    \n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard, {}];\n    \n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    \n    return {updatedDeck: playerCard2.updatedDeck, player, dealer};\n  }\n\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.state.wallet > 0) {\n        const deck = (this.state.deck.length < 10) ? this.generateDeck() : this.state.deck;\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 100,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n       \n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return { randomCard, updatedDeck };\n  }\n  \n  placeBet() {\n    const currentBet = this.state.inputValue;\n\n    if (currentBet > this.state.wallet) {\n      this.setState({ message: 'Insufficient funds to bet that amount.' });\n    } else if (currentBet % 1 !== 0) {\n      this.setState({ message: 'Please bet whole numbers only.' });\n    } else {\n      // Deduct current bet from wallet\n      const wallet = this.state.wallet - currentBet;\n      this.setState({ wallet, inputValue: '', currentBet });\n    }\n  }\n  \n  hit() {\n    if (!this.state.gameOver) {\n      if (this.state.currentBet) {\n        const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n\n        if (player.count > 21) {\n          this.setState({ player, gameOver: true, message: 'BUST!' });\n        } else {\n          this.setState({ deck: updatedDeck, player });\n        }\n      } else {\n        this.setState({ message: 'Please place bet.' });\n      }\n    } else {\n      this.setState({ message: 'Game over! Please start a new game.' });\n    }\n  }\n  \n  dealerDraw(dealer, deck) {\n    const { randomCard, updatedDeck } = this.getRandomCard(deck);\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return { dealer, updatedDeck };\n  }\n  \n  getCount(cards) {\n    const rearranged = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n      \n      \n      // (card.number === 'A') ? rearranged.push(card) : rearranged.unshift(card);\n    });\n    \n    return rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return (total + 11 <= 21) ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  \n  stand() {\n    if (!this.state.gameOver) {\n      // Show dealer's 2nd card\n      const randomCard = this.getRandomCard(this.state.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.state.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while(dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.state.wallet + this.state.currentBet * 2,\n          gameOver: true,\n          message: 'Dealer bust! You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.state.player);\n        let wallet = this.state.wallet;\n        let message;\n        \n        if (winner === 'dealer') {\n          message = 'Dealer wins...';\n        } else if (winner === 'player') {\n          wallet += this.state.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.state.currentBet;\n          message = 'Push.';\n        }\n        \n        this.setState({\n          deck, \n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      } \n    } else {\n      this.setState({ message: 'Game over! Please start a new game.' });\n    }\n  }\n  \n  getWinner(dealer, player) {\n    if (dealer.count > player.count) {\n      return 'dealer';\n    } else if (dealer.count < player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n  \n  inputChange(e) {\n    const inputValue = +e.target.value;\n    this.setState({inputValue});\n  }\n  \n  handleKeyDown(e) {\n    const enter = 13;\n    console.log(e.keyCode);\n    \n    if (e.keyCode === enter) {\n      this.placeBet();\n    }\n  }\n  \n  componentWillMount() {\n    this.startNewGame();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n  \n  render() {\n    let dealerCount;\n    const card1 = this.state.dealer.cards[0].number;\n    const card2 = this.state.dealer.cards[1].number;\n    if (card2) {\n      dealerCount = this.state.dealer.count;\n    } else {\n      if (card1 === 'J' || card1 === 'Q' || card1 === 'K') {\n        dealerCount = 10;\n      } else if (card1 === 'A') {\n        dealerCount = 11;\n      } else {\n        dealerCount = card1;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"buttons\">\n          <button onClick={() => {this.startNewGame()}}>New Game</button>\n          <button onClick={() => {this.hit()}}>Hit</button>\n          <button onClick={() => {this.stand()}}>Stand</button>\n        </div>\n        \n        <p>Wallet: ${ this.state.wallet }</p>\n        {\n          !this.state.currentBet ? \n          <div className=\"input-bet\">            \n            <form>\n              <input type=\"text\" name=\"bet\" placeholder=\"\" value={this.state.inputValue} onChange={this.inputChange.bind(this)}/>\n            </form>\n            <button onClick={() => {this.placeBet()}}>Place Bet</button>\n          </div>\n          : null\n        }\n        {\n          this.state.gameOver ?\n          <div className=\"buttons\">\n            <button onClick={() => {this.startNewGame('continue')}}>Continue</button>\n          </div>\n          : null\n        }\n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        \n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n        <p>{ this.state.message }</p>\n      </div>\n    );\n  }\n};\n\nconst Card = ({ number, suit }) => {\n  const combo = (number) ? `${number}${suit}` : null;\n  const color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\n  \n  return (\n    <td>\n      <div className={color}>\n        { combo }\n      </div>\n    </td>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('main'));\n*/"],"mappings":"AAAA,OAAO,aAAa;AACpB;;AAGA,eAAeA,GAAG;AACl},"metadata":{},"sourceType":"module","externalDependencies":[]}