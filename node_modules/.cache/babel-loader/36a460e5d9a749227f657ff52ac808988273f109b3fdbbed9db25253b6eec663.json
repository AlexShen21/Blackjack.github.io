{"ast":null,"code":"var _jsxFileName = \"/Users/alexshen/Desktop/KTP REACT/src/index.jsx\";\nimport React from 'react';\nimport './style.css';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //Defines the game state \n    this.gameState = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 0,\n      inputValue: '',\n      currentBet: null,\n      gameOver: false,\n      message: null\n    };\n  }\n\n  //generate a deck consisting of cards 2-A and suits of diamond, club, heart, and clover\n  generateDeck() {\n    let cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\n    let suits = ['d', 'c', 'h', 's'];\n    let deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({\n          number: cards[i],\n          suit: suits[j]\n        });\n      }\n    }\n    return deck;\n  }\n  dealCards(deck) {\n    const pCard1 = this.getRandomCard(deck);\n    const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n    const pCard2 = this.getRandomCard(dCard1.updatedDeck);\n    const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n    const dealerStartingHand = [dCard1.randomCard, {}];\n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    return {\n      updatedDeck: pCard2.updatedDeck,\n      player,\n      dealer\n    };\n  }\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.gameState.wallet > 0) {\n        const deck = this.gameState.deck.length < 10 ? this.generateDeck() : this.gameState.deck;\n        const {\n          updatedDeck,\n          player,\n          dealer\n        } = this.dealCards(deck);\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({\n          message: 'Game over! You are broke! Please start a new game.'\n        });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const {\n        updatedDeck,\n        player,\n        dealer\n      } = this.dealCards(deck);\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 100,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return {\n      randomCard,\n      updatedDeck\n    };\n  }\n  placeBet() {\n    const currentBet = this.gameState.inputValue;\n    if (currentBet > this.gameState.wallet) {\n      this.setState({\n        message: 'Not enough money'\n      });\n    } else if (currentBet % 1 !== 0) {\n      this.setState({\n        message: 'Cannot bet decimal amounts'\n      });\n    } else {\n      // Deduct current bet from wallet\n      const wallet = this.gameState.wallet - currentBet;\n      this.setState({\n        wallet,\n        inputValue: '',\n        currentBet\n      });\n    }\n  }\n  hit() {\n    if (!this.gameState.gameOver) {\n      if (this.gameState.currentBet) {\n        const {\n          randomCard,\n          updatedDeck\n        } = this.getRandomCard(this.gameState.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n        if (player.count > 21) {\n          this.setState({\n            player,\n            gameOver: true,\n            message: 'BUST!'\n          });\n        } else {\n          this.setState({\n            deck: updatedDeck,\n            player\n          });\n        }\n      } else {\n        this.setState({\n          message: 'Please place bet.'\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  dealerDraw(dealer, deck) {\n    const {\n      randomCard,\n      updatedDeck\n    } = this.getRandomCard(deck);\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return {\n      dealer,\n      updatedDeck\n    };\n  }\n  getCount(cards) {\n    const rearranged = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n\n      // (card.number === 'A') ? rearranged.push(card) : rearranged.unshift(card);\n    });\n\n    return rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return total + 11 <= 21 ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  stand() {\n    if (!this.gameState.gameOver) {\n      // Show dealer's 2nd card\n      const randomCard = this.getRandomCard(this.gameState.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.gameState.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while (dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.gameState.wallet + this.gameState.currentBet * 2,\n          gameOver: true,\n          message: 'Dealer bust! You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.gameState.player);\n        let wallet = this.gameState.wallet;\n        let message;\n        if (winner === 'dealer') {\n          message = 'Dealer wins...';\n        } else if (winner === 'player') {\n          wallet += this.gameState.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.gameState.currentBet;\n          message = 'Push.';\n        }\n        this.setState({\n          deck,\n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  getWinner(dealer, player) {\n    if (dealer.count > player.count) {\n      return 'dealer';\n    } else if (dealer.count < player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 230,\n  columnNumber: 19\n}, this), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","App","Component","constructor","props","gameState","deck","dealer","player","wallet","inputValue","currentBet","gameOver","message","generateDeck","cards","suits","i","length","j","push","number","suit","dealCards","pCard1","getRandomCard","dCard1","updatedDeck","pCard2","playerStartingHand","randomCard","dealerStartingHand","count","getCount","startNewGame","type","setState","randomIndex","Math","floor","random","splice","placeBet","hit","state","dealerDraw","rearranged","forEach","card","unshift","reduce","total","stand","pop","draw","winner","getWinner","render","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById"],"sources":["/Users/alexshen/Desktop/KTP REACT/src/index.jsx"],"sourcesContent":["import React from 'react';\nimport './style.css'\nimport ReactDOM from 'react-dom';\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props); \n      //Defines the game state \n      this.gameState = {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 0,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      };\n    }\n    \n    //generate a deck consisting of cards 2-A and suits of diamond, club, heart, and clover\n    generateDeck() {\n      let cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n      let suits = ['d','c','h','s'];\n      let deck = [];\n      for (let i = 0; i < cards.length; i++) {\n        for (let j = 0; j < suits.length; j++) {\n          deck.push({number: cards[i], suit: suits[j]});\n        }\n      }\n      return deck;\n    }\n\n    \n    dealCards(deck) {\n      const pCard1 = this.getRandomCard(deck);\n      const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n      const pCard2 = this.getRandomCard(dCard1.updatedDeck);    \n      const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n      const dealerStartingHand = [dCard1.randomCard, {}];\n      \n      const player = {\n        cards: playerStartingHand,\n        count: this.getCount(playerStartingHand)\n      };\n      const dealer = {\n        cards: dealerStartingHand,\n        count: this.getCount(dealerStartingHand)\n      };\n      \n      return {updatedDeck: pCard2.updatedDeck, player, dealer};\n    }\n  \n    startNewGame(type) {\n      if (type === 'continue') {\n        if (this.gameState.wallet > 0) {\n          const deck = (this.gameState.deck.length < 10) ? this.generateDeck() : this.gameState.deck;\n          const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n          this.setState({\n            deck: updatedDeck,\n            dealer,\n            player,\n            currentBet: null,\n            gameOver: false,\n            message: null\n          });\n        } else {\n          this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n        }\n      } else {\n        const deck = this.generateDeck();\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          wallet: 100,\n          inputValue: '',\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      }\n    }\n         \n    getRandomCard(deck) {\n      const updatedDeck = deck;\n      const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n      const randomCard = updatedDeck[randomIndex];\n      updatedDeck.splice(randomIndex, 1);\n      return { randomCard, updatedDeck };\n    }\n    \n    placeBet() {\n      const currentBet = this.gameState.inputValue;\n  \n      if (currentBet > this.gameState.wallet) {\n        this.setState({ message: 'Not enough money' });\n      } else if (currentBet % 1 !== 0) {\n        this.setState({ message: 'Cannot bet decimal amounts' });\n      } else {\n        // Deduct current bet from wallet\n        const wallet = this.gameState.wallet - currentBet;\n        this.setState({ wallet, inputValue: '', currentBet });\n      }\n    }\n    \n    hit() {\n      if (!this.gameState.gameOver) {\n        if (this.gameState.currentBet) {\n          const { randomCard, updatedDeck } = this.getRandomCard(this.gameState.deck);\n          const player = this.state.player;\n          player.cards.push(randomCard);\n          player.count = this.getCount(player.cards);\n  \n          if (player.count > 21) {\n            this.setState({ player, gameOver: true, message: 'BUST!' });\n          } else {\n            this.setState({ deck: updatedDeck, player });\n          }\n        } else {\n          this.setState({ message: 'Please place bet.' });\n        }\n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    dealerDraw(dealer, deck) {\n      const { randomCard, updatedDeck } = this.getRandomCard(deck);\n      dealer.cards.push(randomCard);\n      dealer.count = this.getCount(dealer.cards);\n      return { dealer, updatedDeck };\n    }\n    \n    getCount(cards) {\n      const rearranged = [];\n      cards.forEach(card => {\n        if (card.number === 'A') {\n          rearranged.push(card);\n        } else if (card.number) {\n          rearranged.unshift(card);\n        }\n        \n        \n        // (card.number === 'A') ? rearranged.push(card) : rearranged.unshift(card);\n      });\n      \n      return rearranged.reduce((total, card) => {\n        if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n        } else if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n        } else {\n          return total + card.number;\n        }\n      }, 0);\n    }\n    \n    stand() {\n      if (!this.gameState.gameOver) {\n        // Show dealer's 2nd card\n        const randomCard = this.getRandomCard(this.gameState.deck);\n        let deck = randomCard.updatedDeck;\n        let dealer = this.gameState.dealer;\n        dealer.cards.pop();\n        dealer.cards.push(randomCard.randomCard);\n        dealer.count = this.getCount(dealer.cards);\n  \n        // Keep drawing cards until count is 17 or more\n        while(dealer.count < 17) {\n          const draw = this.dealerDraw(dealer, deck);\n          dealer = draw.dealer;\n          deck = draw.updatedDeck;\n        }\n  \n        if (dealer.count > 21) {\n          this.setState({\n            deck,\n            dealer,\n            wallet: this.gameState.wallet + this.gameState.currentBet * 2,\n            gameOver: true,\n            message: 'Dealer bust! You win!'\n          });\n        } else {\n          const winner = this.getWinner(dealer, this.gameState.player);\n          let wallet = this.gameState.wallet;\n          let message;\n          \n          if (winner === 'dealer') {\n            message = 'Dealer wins...';\n          } else if (winner === 'player') {\n            wallet += this.gameState.currentBet * 2;\n            message = 'You win!';\n          } else {\n            wallet += this.gameState.currentBet;\n            message = 'Push.';\n          }\n          \n          this.setState({\n            deck, \n            dealer,\n            wallet,\n            gameOver: true,\n            message\n          });\n        } \n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    getWinner(dealer, player) {\n      if (dealer.count > player.count) {\n        return 'dealer';\n      } else if (dealer.count < player.count) {\n        return 'player';\n      } else {\n        return 'push';\n      }\n    }\n}\n\n\n  \n  ReactDOM.render(<App />, document.getElementById('root'));\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}