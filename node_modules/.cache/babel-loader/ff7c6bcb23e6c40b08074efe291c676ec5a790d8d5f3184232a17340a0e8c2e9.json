{"ast":null,"code":"var _jsxFileName = \"/Users/alexshen/Desktop/KTP REACT/src/index.jsx\";\nimport React from 'react';\nimport './style.css';\nimport ReactDOM from 'react-dom';\n\n/*\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props); \n      //Defines the game state \n      this.state = {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 400,\n        inputValue: 0,\n        currentBet: null,\n        gameOver: true,\n        message: null,\n      };\n    }\n    \n    //generate a deck of cards 2-A and suits of diamond, club, heart, and clover\n    generateDeck() {\n      let cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n      let suits = ['d','c','h','s'];\n      let deck = [];\n      for (let i = 0; i < cards.length; i++) {\n        for (let j = 0; j < suits.length; j++) {\n          deck.push({number: cards[i], suit: suits[j]});\n        }\n      }\n      return deck;\n    }\n\n    getRandomCard(deck) {\n      const updatedDeck = Array.from(deck);\n      const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n      const randomCard = updatedDeck[randomIndex];\n      updatedDeck.splice(randomIndex, 1);\n      return { randomCard, updatedDeck };\n    }\n    \n    dealCards(deck) {\n      //assign the cards \n      const pCard1 = this.getRandomCard(deck);\n      const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n      const pCard2 = this.getRandomCard(dCard1.updatedDeck);    \n      const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n      const dealerStartingHand = [dCard1.randomCard, {}];\n      \n      const player = {\n        cards: playerStartingHand,\n        count: this.getCount(playerStartingHand)\n      };\n      const dealer = {\n        cards: dealerStartingHand,\n        count: this.getCount(dealerStartingHand)\n      };\n      \n      return {updatedDeck: pCard2.updatedDeck, player, dealer};\n    }\n  \n    startNewGame(type) {\n      if (type === 'continue') {\n        if (this.state.wallet > 0) {\n          const deck = this.generateDeck();\n          const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n          this.setState({\n            deck: updatedDeck,\n            dealer,\n            player,\n            currentBet: null,\n            gameOver: false,\n            message: null\n          });\n        } else {\n          this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n        }\n      } \n      else {\n        const deck = this.generateDeck();\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          wallet: 400,\n          inputValue: 0,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      }\n    }\n         \n\n    addBet(type){\n      let bet = this.state.inputValue;\n      bet += type;\n      if(bet > this.state.wallet){\n        return;\n      }\n      this.setState({\n        inputValue: bet \n      })\n    }\n\n    placeBet() {\n      const currentBet = this.state.inputValue;\n  \n      if (currentBet === 0) {\n        this.setState({ message: 'Cannot bet $0' });\n      } else {\n\n        const wallet = this.state.wallet - currentBet;\n        this.setState({ wallet, inputValue: 0, currentBet, gameOver: false});\n      }\n    }\n    \n    hit() {\n      if (!this.state.gameOver) {\n        if (this.state.currentBet) {\n          const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n          const player = this.state.player;\n          player.cards.push(randomCard);\n          player.count = this.getCount(player.cards);\n  \n          if (player.count > 21) {\n            this.setState({ player, gameOver: true, message: 'BUST!' });\n          } else {\n            this.setState({ deck: updatedDeck, player });\n          }\n        } else {\n          this.setState({ message: 'Please place bet.' });\n        }\n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    dealerDraw(deck) {\n      const { randomCard, updatedDeck } = this.getRandomCard(deck);\n      let dealer = this.state.dealer;\n      dealer.cards.push(randomCard);\n      dealer.count = this.getCount(dealer.cards);\n      return { dealer, updatedDeck };\n    }\n    \n    getCount(cards) {\n      const cardList = [];\n      cards.forEach(card => {\n        if (card.number === 'A') {\n          cardList.push(card);\n        } else if (card.number) {\n          cardList.unshift(card);\n        }\n        \n\n      });\n      \n      return cardList.reduce((total, card) => {\n        if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n        } else if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n        } else {\n          return total + card.number;\n        }\n      }, 0);\n    }\n    \n    \n    stand() {\n      if (!this.state.gameOver) {\n        // Show dealer's 2nd card\n        const randomCard = this.getRandomCard(this.state.deck);\n        let deck = randomCard.updatedDeck;\n        let dealer = this.state.dealer;\n        dealer.cards.pop();\n        dealer.cards.push(randomCard.randomCard);\n        dealer.count = this.getCount(dealer.cards);\n  \n        // Keep drawing cards until count is 17 or more\n        while(dealer.count < 17) {\n          const draw = this.dealerDraw(dealer, deck);\n          dealer = draw.dealer;\n          deck = draw.updatedDeck;\n        }\n  \n        if (dealer.count > 21) {\n          this.setState({\n            deck,\n            dealer,\n            wallet: this.state.wallet + this.state.currentBet * 2,\n            gameOver: true,\n            message: 'Dealer bust! You win!'\n          });\n        } else {\n          const winner = this.getWinner(dealer, this.state.player);\n          let wallet = this.state.wallet;\n          let message;\n          \n          if (winner === 'dealer') {\n            message = 'Dealer wins...';\n          } else if (winner === 'player') {\n            wallet += this.state.currentBet * 2;\n            message = 'You win!';\n          } else {\n            wallet += this.state.currentBet;\n            message = 'Push.';\n          }\n          \n          this.setState({\n            deck, \n            dealer,\n            wallet,\n            gameOver: true,\n            message\n          });\n        } \n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    getWinner() {\n\n      if (this.state.dealer.count > this.state.player.count) {\n        return 'dealer';\n      } else if (this.state.dealer.count < this.state.player.count) {\n        return 'player';\n      } else {\n        return 'push';\n      }\n    }\n    \n    componentWillMount() {\n      this.startNewGame();\n    }\n\n\n\n  render(){\n    \n    \n    \n\n    return (\n\n      <div>\n        <div>\n          <h1 className='title'>Blackjack</h1>\n\n          { !this.state.startGame ?\n            <div>\n          <div className='newGame'><button className = 'newGameButton' onClick={() => {this.startNewGame()}}>New Game</button></div>\n          </div>\n          :null\n          }\n          \n          {\n            !this.state.gameOver && this.state.currentBet ? \n          <p className='actions'>\n            <button className = 'actionButton' onClick={() => {this.hit()}}>Hit</button>\n            <button className = 'actionButton'onClick={() => {this.stand()}}>Stand</button>\n\n\n          </p>\n          : null\n          }\n        </div>\n        \n        <div>\n          {\n          !this.state.gameOver?\n          <div>\n          <div className = 'bet'>\n            <button className = 'betMoney5' onClick={() => {this.addBet(5)}}> $5 </button>\n            <button className = 'betMoney10' onClick={() => {this.addBet(10)}}> $10 </button>\n            <button className = 'betMoney20' onClick={() => {this.addBet(20)}}> $20 </button>\n            \n          </div>\n          <div className = 'placeBet'>\n            <button className = 'placeBetButton' onClick={() => {this.placeBet(this.state.currentBet)}}> Place Bet </button>\n          </div>\n          \n          </div>\n          : null\n          }\n          \n\n        </div>\n\n        {\n        <div>\n        <div className = 'Wallet'>Wallet: ${ this.state.wallet }</div>\n        <div className = 'currBet'>Current Bet: ${ this.state.inputValue }</div>\n        </div>}\n        \n        \n        \n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n    \n    </div>\n    )\n    }\n    \n  }\n  const Card = ({ number, suit }) => {\n    const combo = (number) ? `${number}${suit}` : null;\n    \n    return (\n      <td>\n        <div className= 'card'>\n          { combo }\n        </div>\n      </td>\n    );\n  };\n\n\n\n  ReactDOM.render(<App />, document.getElementById('root'));*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 0,\n      inputValue: '',\n      currentBet: null,\n      gameOver: false,\n      message: null\n    };\n  }\n  generateDeck() {\n    const cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\n    const suits = ['♦', '♣', '♥', '♠'];\n    const deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({\n          number: cards[i],\n          suit: suits[j]\n        });\n      }\n    }\n    return deck;\n  }\n  dealCards(deck) {\n    const playerCard1 = this.getRandomCard(deck);\n    const dealerCard1 = this.getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = this.getRandomCard(dealerCard1.updatedDeck);\n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard, {}];\n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    return {\n      updatedDeck: playerCard2.updatedDeck,\n      player,\n      dealer\n    };\n  }\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.state.wallet > 0) {\n        const deck = this.generateDeck();\n        const {\n          updatedDeck,\n          player,\n          dealer\n        } = this.dealCards(deck);\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({\n          message: 'Game over! You are broke! Please start a new game.'\n        });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const {\n        updatedDeck,\n        player,\n        dealer\n      } = this.dealCards(deck);\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 100,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n  addBet(type) {\n    let bet = this.state.inputValue;\n    bet += type;\n    if (bet > this.state.wallet) {\n      return;\n    }\n    this.setState({\n      inputValue: bet\n    });\n  }\n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return {\n      randomCard,\n      updatedDeck\n    };\n  }\n  placeBet() {\n    const currentBet = this.state.inputValue;\n    if (currentBet > this.state.wallet) {\n      this.setState({\n        message: 'Insufficient funds to bet that amount.'\n      });\n    } else if (currentBet % 1 !== 0) {\n      this.setState({\n        message: 'Please bet whole numbers only.'\n      });\n    } else {\n      const wallet = this.state.wallet - currentBet;\n      this.setState({\n        wallet,\n        inputValue: '',\n        currentBet\n      });\n    }\n  }\n  hit() {\n    if (!this.state.gameOver) {\n      if (this.state.currentBet) {\n        const {\n          randomCard,\n          updatedDeck\n        } = this.getRandomCard(this.state.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n        if (player.count > 21) {\n          this.setState({\n            player,\n            gameOver: true,\n            message: 'BUST!'\n          });\n        } else {\n          this.setState({\n            deck: updatedDeck,\n            player\n          });\n        }\n      } else {\n        this.setState({\n          message: 'Please place bet.'\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  dealerDraw(dealer, deck) {\n    const {\n      randomCard,\n      updatedDeck\n    } = this.getRandomCard(deck);\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return {\n      dealer,\n      updatedDeck\n    };\n  }\n  getCount(cards) {\n    const rearranged = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n    });\n    return rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return total + 11 <= 21 ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  stand() {\n    if (!this.state.gameOver) {\n      const randomCard = this.getRandomCard(this.state.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.state.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while (dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.state.wallet + this.state.currentBet * 2,\n          gameOver: true,\n          message: 'Dealer bust! You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.state.player);\n        let wallet = this.state.wallet;\n        let message;\n        if (winner === 'dealer') {\n          message = 'Dealer wins...';\n        } else if (winner === 'player') {\n          wallet += this.state.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.state.currentBet;\n          message = 'Push.';\n        }\n        this.setState({\n          deck,\n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      }\n    } else {\n      this.setState({\n        message: 'Game over! Please start a new game.'\n      });\n    }\n  }\n  getWinner(dealer, player) {\n    if (dealer.count > player.count) {\n      return 'dealer';\n    } else if (dealer.count < player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n  componentWillMount() {\n    this.startNewGame();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Blackjack\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this), !this.state.startGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"newGame\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"newGameButton\",\n              onClick: () => {\n                this.startNewGame();\n              },\n              children: \"New Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 15\n        }, this) : null, !this.state.gameOver && this.state.currentBet ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"actionButton\",\n            onClick: () => {\n              this.hit();\n            },\n            children: \"Hit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"actionButton\",\n            onClick: () => {\n              this.stand();\n            },\n            children: \"Stand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !this.state.gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"betMoney5\",\n              onClick: () => {\n                this.addBet(5);\n              },\n              children: \" $5 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"betMoney10\",\n              onClick: () => {\n                this.addBet(10);\n              },\n              children: \" $10 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"betMoney20\",\n              onClick: () => {\n                this.addBet(20);\n              },\n              children: \" $20 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"placeBet\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"placeBetButton\",\n              onClick: () => {\n                this.placeBet(this.state.currentBet);\n              },\n              children: \" Place Bet \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Wallet\",\n          children: [\"Wallet: $\", this.state.wallet]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currBet\",\n          children: [\"Current Bet: $\", this.state.inputValue]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Hand (\", this.state.player.count, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: this.state.player.cards.map((card, i) => {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              number: card.number,\n              suit: card.suit\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Dealer's Hand (\", this.state.dealer.count, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: this.state.dealer.cards.map((card, i) => {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              number: card.number,\n              suit: card.suit\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 9\n    }, this);\n  }\n}\nconst Card = _ref => {\n  let {\n    number,\n    suit\n  } = _ref;\n  const combo = number ? `${number}${suit}` : null;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: combo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 662,\n    columnNumber: 9\n  }, this);\n};\n_c = Card;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 671,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","App","Component","constructor","props","state","deck","dealer","player","wallet","inputValue","currentBet","gameOver","message","generateDeck","cards","suits","i","length","j","push","number","suit","dealCards","playerCard1","getRandomCard","dealerCard1","updatedDeck","playerCard2","playerStartingHand","randomCard","dealerStartingHand","count","getCount","startNewGame","type","setState","addBet","bet","randomIndex","Math","floor","random","splice","placeBet","hit","dealerDraw","rearranged","forEach","card","unshift","reduce","total","stand","pop","draw","winner","getWinner","componentWillMount","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber","startGame","onClick","map","Card","_ref","combo","_c","document","getElementById","$RefreshReg$"],"sources":["/Users/alexshen/Desktop/KTP REACT/src/index.jsx"],"sourcesContent":["import React from 'react';\nimport './style.css'\nimport ReactDOM from 'react-dom';\n\n/*\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props); \n      //Defines the game state \n      this.state = {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 400,\n        inputValue: 0,\n        currentBet: null,\n        gameOver: true,\n        message: null,\n      };\n    }\n    \n    //generate a deck of cards 2-A and suits of diamond, club, heart, and clover\n    generateDeck() {\n      let cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n      let suits = ['d','c','h','s'];\n      let deck = [];\n      for (let i = 0; i < cards.length; i++) {\n        for (let j = 0; j < suits.length; j++) {\n          deck.push({number: cards[i], suit: suits[j]});\n        }\n      }\n      return deck;\n    }\n\n    getRandomCard(deck) {\n      const updatedDeck = Array.from(deck);\n      const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n      const randomCard = updatedDeck[randomIndex];\n      updatedDeck.splice(randomIndex, 1);\n      return { randomCard, updatedDeck };\n    }\n    \n    dealCards(deck) {\n      //assign the cards \n      const pCard1 = this.getRandomCard(deck);\n      const dCard1 = this.getRandomCard(pCard1.updatedDeck);\n      const pCard2 = this.getRandomCard(dCard1.updatedDeck);    \n      const playerStartingHand = [pCard1.randomCard, pCard2.randomCard];\n      const dealerStartingHand = [dCard1.randomCard, {}];\n      \n      const player = {\n        cards: playerStartingHand,\n        count: this.getCount(playerStartingHand)\n      };\n      const dealer = {\n        cards: dealerStartingHand,\n        count: this.getCount(dealerStartingHand)\n      };\n      \n      return {updatedDeck: pCard2.updatedDeck, player, dealer};\n    }\n  \n    startNewGame(type) {\n      if (type === 'continue') {\n        if (this.state.wallet > 0) {\n          const deck = this.generateDeck();\n          const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n          this.setState({\n            deck: updatedDeck,\n            dealer,\n            player,\n            currentBet: null,\n            gameOver: false,\n            message: null\n          });\n        } else {\n          this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n        }\n      } \n      else {\n        const deck = this.generateDeck();\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          wallet: 400,\n          inputValue: 0,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      }\n    }\n         \n\n    addBet(type){\n      let bet = this.state.inputValue;\n      bet += type;\n      if(bet > this.state.wallet){\n        return;\n      }\n      this.setState({\n        inputValue: bet \n      })\n    }\n\n    placeBet() {\n      const currentBet = this.state.inputValue;\n  \n      if (currentBet === 0) {\n        this.setState({ message: 'Cannot bet $0' });\n      } else {\n\n        const wallet = this.state.wallet - currentBet;\n        this.setState({ wallet, inputValue: 0, currentBet, gameOver: false});\n      }\n    }\n    \n    hit() {\n      if (!this.state.gameOver) {\n        if (this.state.currentBet) {\n          const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n          const player = this.state.player;\n          player.cards.push(randomCard);\n          player.count = this.getCount(player.cards);\n  \n          if (player.count > 21) {\n            this.setState({ player, gameOver: true, message: 'BUST!' });\n          } else {\n            this.setState({ deck: updatedDeck, player });\n          }\n        } else {\n          this.setState({ message: 'Please place bet.' });\n        }\n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    dealerDraw(deck) {\n      const { randomCard, updatedDeck } = this.getRandomCard(deck);\n      let dealer = this.state.dealer;\n      dealer.cards.push(randomCard);\n      dealer.count = this.getCount(dealer.cards);\n      return { dealer, updatedDeck };\n    }\n    \n    getCount(cards) {\n      const cardList = [];\n      cards.forEach(card => {\n        if (card.number === 'A') {\n          cardList.push(card);\n        } else if (card.number) {\n          cardList.unshift(card);\n        }\n        \n\n      });\n      \n      return cardList.reduce((total, card) => {\n        if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n        } else if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n        } else {\n          return total + card.number;\n        }\n      }, 0);\n    }\n    \n    \n    stand() {\n      if (!this.state.gameOver) {\n        // Show dealer's 2nd card\n        const randomCard = this.getRandomCard(this.state.deck);\n        let deck = randomCard.updatedDeck;\n        let dealer = this.state.dealer;\n        dealer.cards.pop();\n        dealer.cards.push(randomCard.randomCard);\n        dealer.count = this.getCount(dealer.cards);\n  \n        // Keep drawing cards until count is 17 or more\n        while(dealer.count < 17) {\n          const draw = this.dealerDraw(dealer, deck);\n          dealer = draw.dealer;\n          deck = draw.updatedDeck;\n        }\n  \n        if (dealer.count > 21) {\n          this.setState({\n            deck,\n            dealer,\n            wallet: this.state.wallet + this.state.currentBet * 2,\n            gameOver: true,\n            message: 'Dealer bust! You win!'\n          });\n        } else {\n          const winner = this.getWinner(dealer, this.state.player);\n          let wallet = this.state.wallet;\n          let message;\n          \n          if (winner === 'dealer') {\n            message = 'Dealer wins...';\n          } else if (winner === 'player') {\n            wallet += this.state.currentBet * 2;\n            message = 'You win!';\n          } else {\n            wallet += this.state.currentBet;\n            message = 'Push.';\n          }\n          \n          this.setState({\n            deck, \n            dealer,\n            wallet,\n            gameOver: true,\n            message\n          });\n        } \n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    getWinner() {\n\n      if (this.state.dealer.count > this.state.player.count) {\n        return 'dealer';\n      } else if (this.state.dealer.count < this.state.player.count) {\n        return 'player';\n      } else {\n        return 'push';\n      }\n    }\n    \n    componentWillMount() {\n      this.startNewGame();\n    }\n\n\n\n  render(){\n    \n    \n    \n\n    return (\n\n      <div>\n        <div>\n          <h1 className='title'>Blackjack</h1>\n\n          { !this.state.startGame ?\n            <div>\n          <div className='newGame'><button className = 'newGameButton' onClick={() => {this.startNewGame()}}>New Game</button></div>\n          </div>\n          :null\n          }\n          \n          {\n            !this.state.gameOver && this.state.currentBet ? \n          <p className='actions'>\n            <button className = 'actionButton' onClick={() => {this.hit()}}>Hit</button>\n            <button className = 'actionButton'onClick={() => {this.stand()}}>Stand</button>\n\n\n          </p>\n          : null\n          }\n        </div>\n        \n        <div>\n          {\n          !this.state.gameOver?\n          <div>\n          <div className = 'bet'>\n            <button className = 'betMoney5' onClick={() => {this.addBet(5)}}> $5 </button>\n            <button className = 'betMoney10' onClick={() => {this.addBet(10)}}> $10 </button>\n            <button className = 'betMoney20' onClick={() => {this.addBet(20)}}> $20 </button>\n            \n          </div>\n          <div className = 'placeBet'>\n            <button className = 'placeBetButton' onClick={() => {this.placeBet(this.state.currentBet)}}> Place Bet </button>\n          </div>\n          \n          </div>\n          : null\n          }\n          \n\n        </div>\n\n        {\n        <div>\n        <div className = 'Wallet'>Wallet: ${ this.state.wallet }</div>\n        <div className = 'currBet'>Current Bet: ${ this.state.inputValue }</div>\n        </div>}\n        \n        \n        \n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n    \n    </div>\n    )\n    }\n    \n  }\n  const Card = ({ number, suit }) => {\n    const combo = (number) ? `${number}${suit}` : null;\n    \n    return (\n      <td>\n        <div className= 'card'>\n          { combo }\n        </div>\n      </td>\n    );\n  };\n\n\n\n  ReactDOM.render(<App />, document.getElementById('root'));*/\n  class App extends React.Component {\n    constructor(props) {\n      super(props);\n      \n      this.state = {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 0,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      };\n    }\n  \n    generateDeck() {\n      const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n      const suits = ['♦','♣','♥','♠'];\n      const deck = [];\n      for (let i = 0; i < cards.length; i++) {\n        for (let j = 0; j < suits.length; j++) {\n          deck.push({number: cards[i], suit: suits[j]});\n        }\n      }\n      return deck;\n    }\n    \n    dealCards(deck) {\n      const playerCard1 = this.getRandomCard(deck);\n      const dealerCard1 = this.getRandomCard(playerCard1.updatedDeck);\n      const playerCard2 = this.getRandomCard(dealerCard1.updatedDeck);    \n      const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n      const dealerStartingHand = [dealerCard1.randomCard, {}];\n      \n      const player = {\n        cards: playerStartingHand,\n        count: this.getCount(playerStartingHand)\n      };\n      const dealer = {\n        cards: dealerStartingHand,\n        count: this.getCount(dealerStartingHand)\n      };\n      \n      return {updatedDeck: playerCard2.updatedDeck, player, dealer};\n    }\n  \n    startNewGame(type) {\n      if (type === 'continue') {\n        if (this.state.wallet > 0) {\n          const deck = this.generateDeck()\n          const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n          this.setState({\n            deck: updatedDeck,\n            dealer,\n            player,\n            currentBet: null,\n            gameOver: false,\n            message: null\n          });\n        } else {\n          this.setState({ message: 'Game over! You are broke! Please start a new game.' });\n        }\n      } else {\n        const deck = this.generateDeck();\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n  \n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          wallet: 100,\n          inputValue: '',\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      }\n    }\n\n    addBet(type){\n      let bet = this.state.inputValue;\n      bet += type;\n      if(bet > this.state.wallet){\n        return;\n      }\n      this.setState({\n        inputValue: bet \n      })\n    }\n         \n    getRandomCard(deck) {\n      const updatedDeck = deck;\n      const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n      const randomCard = updatedDeck[randomIndex];\n      updatedDeck.splice(randomIndex, 1);\n      return { randomCard, updatedDeck };\n    }\n    \n    placeBet() {\n      const currentBet = this.state.inputValue;\n  \n      if (currentBet > this.state.wallet) {\n        this.setState({ message: 'Insufficient funds to bet that amount.' });\n      } else if (currentBet % 1 !== 0) {\n        this.setState({ message: 'Please bet whole numbers only.' });\n      } else {\n        const wallet = this.state.wallet - currentBet;\n        this.setState({ wallet, inputValue: '', currentBet });\n      }\n    }\n    \n    hit() {\n      if (!this.state.gameOver) {\n        if (this.state.currentBet) {\n          const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n          const player = this.state.player;\n          player.cards.push(randomCard);\n          player.count = this.getCount(player.cards);\n  \n          if (player.count > 21) {\n            this.setState({ player, gameOver: true, message: 'BUST!' });\n          } else {\n            this.setState({ deck: updatedDeck, player });\n          }\n        } else {\n          this.setState({ message: 'Please place bet.' });\n        }\n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    dealerDraw(dealer, deck) {\n      const { randomCard, updatedDeck } = this.getRandomCard(deck);\n      dealer.cards.push(randomCard);\n      dealer.count = this.getCount(dealer.cards);\n      return { dealer, updatedDeck };\n    }\n    \n    getCount(cards) {\n      const rearranged = [];\n      cards.forEach(card => {\n        if (card.number === 'A') {\n          rearranged.push(card);\n        } else if (card.number) {\n          rearranged.unshift(card);\n        }\n        \n        \n      });\n      \n      return rearranged.reduce((total, card) => {\n        if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n          return total + 10;\n        } else if (card.number === 'A') {\n          return (total + 11 <= 21) ? total + 11 : total + 1;\n        } else {\n          return total + card.number;\n        }\n      }, 0);\n    }\n    \n    stand() {\n      if (!this.state.gameOver) {\n\n        const randomCard = this.getRandomCard(this.state.deck);\n        let deck = randomCard.updatedDeck;\n        let dealer = this.state.dealer;\n        dealer.cards.pop();\n        dealer.cards.push(randomCard.randomCard);\n        dealer.count = this.getCount(dealer.cards);\n  \n        // Keep drawing cards until count is 17 or more\n        while(dealer.count < 17) {\n          const draw = this.dealerDraw(dealer, deck);\n          dealer = draw.dealer;\n          deck = draw.updatedDeck;\n        }\n  \n        if (dealer.count > 21) {\n          this.setState({\n            deck,\n            dealer,\n            wallet: this.state.wallet + this.state.currentBet * 2,\n            gameOver: true,\n            message: 'Dealer bust! You win!'\n          });\n        } else {\n          const winner = this.getWinner(dealer, this.state.player);\n          let wallet = this.state.wallet;\n          let message;\n          \n          if (winner === 'dealer') {\n            message = 'Dealer wins...';\n          } else if (winner === 'player') {\n            wallet += this.state.currentBet * 2;\n            message = 'You win!';\n          } else {\n            wallet += this.state.currentBet;\n            message = 'Push.';\n          }\n          \n          this.setState({\n            deck, \n            dealer,\n            wallet,\n            gameOver: true,\n            message\n          });\n        } \n      } else {\n        this.setState({ message: 'Game over! Please start a new game.' });\n      }\n    }\n    \n    getWinner(dealer, player) {\n      if (dealer.count > player.count) {\n        return 'dealer';\n      } else if (dealer.count < player.count) {\n        return 'player';\n      } else {\n        return 'push';\n      }\n    }\n    \n    \n    componentWillMount() {\n      this.startNewGame();\n    }\n\n\n    render(){\n    \n    \n    \n\n      return (\n  \n        <div>\n          <div>\n            <h1 className='title'>Blackjack</h1>\n  \n            { !this.state.startGame ?\n              <div>\n            <div className='newGame'><button className = 'newGameButton' onClick={() => {this.startNewGame()}}>New Game</button></div>\n            </div>\n            :null\n            }\n            \n            {\n              !this.state.gameOver && this.state.currentBet ? \n            <p className='actions'>\n              <button className = 'actionButton' onClick={() => {this.hit()}}>Hit</button>\n              <button className = 'actionButton'onClick={() => {this.stand()}}>Stand</button>\n  \n  \n            </p>\n            : null\n            }\n          </div>\n          \n          <div>\n            {\n            !this.state.gameOver?\n            <div>\n            <div className = 'bet'>\n              <button className = 'betMoney5' onClick={() => {this.addBet(5)}}> $5 </button>\n              <button className = 'betMoney10' onClick={() => {this.addBet(10)}}> $10 </button>\n              <button className = 'betMoney20' onClick={() => {this.addBet(20)}}> $20 </button>\n              \n            </div>\n            <div className = 'placeBet'>\n              <button className = 'placeBetButton' onClick={() => {this.placeBet(this.state.currentBet)}}> Place Bet </button>\n            </div>\n            \n            </div>\n            : null\n            }\n            \n  \n          </div>\n  \n          {\n          <div>\n          <div className = 'Wallet'>Wallet: ${ this.state.wallet }</div>\n          <div className = 'currBet'>Current Bet: ${ this.state.inputValue }</div>\n          </div>}\n          \n          \n          \n          <p>Your Hand ({ this.state.player.count })</p>\n          <table className=\"cards\">\n            <tr>\n              { this.state.player.cards.map((card, i) => {\n                return <Card key={i} number={card.number} suit={card.suit}/>\n              }) }\n            </tr>\n          </table>\n          <p>Dealer's Hand ({ this.state.dealer.count })</p>\n          <table className=\"cards\">\n            <tr>\n              { this.state.dealer.cards.map((card, i) => {\n                return <Card key={i} number={card.number} suit={card.suit}/>;\n              }) }\n            </tr>\n          </table>\n          \n      \n      </div>\n      )\n      }\n      \n    }\n    const Card = ({ number, suit }) => {\n      const combo = (number) ? `${number}${suit}` : null;\n      \n      return (\n        <td>\n          <div className= 'card'>\n            { combo }\n          </div>\n        </td>\n      );\n    };\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}